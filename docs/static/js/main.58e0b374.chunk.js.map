{"version":3,"sources":["helper/index.js","App.js","serviceWorker.js","index.js"],"names":["aleatoriosUtilizados","rnd","min","max","Math","ceil","floor","random","config","id","listaDeEventos","FILA","tempoGlobal","proximoPasso","nrAleatorios","evento","reduce","res","obj","tempo","index","map","ev","indexOf","splice","removeEventoDoEscalonador","console","log","tipo","chegada","saida","agendaSaida","push","agendaChegada","iniciaExecucao","configuracaoInicial","tempoAtual","tempoAnterior","capacidadeDaFila","servidores","saidaMin","saidaMax","chegadaMin","chegadaMax","App","useEffect","useState","setChegadaMin","setChegadaMax","setSaidaMin","setSaidaMax","setServidores","setCapacidadeDaFila","chegadaInicial","setChegadaInicial","setNrAleatorios","terminalRef","className","type","value","onChange","e","target","style","width","backgroundColor","onClick","runCommandOnActive","window","location","reload","watchConsoleLogging","startState","hideTopBar","color","prompt","allowTabs","ref","terminal","commands","open","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.58e0b374.chunk.js","sourcesContent":["export const createRand = seed => {\n  var m = 992;\n  var a = 11;\n  var c = 17;\n\n  var z = seed;\n\n  return function() {\n    z = (a * z + c) % m;\n    return z / m;\n  };\n};\n\nlet aleatoriosUtilizados = 0;\n\nconst rnd = (min, max) => {\n  aleatoriosUtilizados = aleatoriosUtilizados + 1;\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nlet config = {};\n//Id para controle de eventos\nlet id = 1;\n\n//Escalonador\nlet listaDeEventos = [];\n\n//Número de clientes na fila\nlet FILA = 0;\n\n//Número de perdas\nlet PERDAS = 0;\n\n//Tempo global de execução\nlet tempoGlobal = 0;\n\n//Tempo que ocorreu o ultimo evento\nlet tempoDoUltimoEvento = 0;\n\nconst removeEventoDoEscalonador = evento => {\n  var index = listaDeEventos\n    .map(ev => {\n      return ev.id;\n    })\n    .indexOf(evento.id);\n\n  listaDeEventos.splice(index, 1);\n};\n\n//Executa o próximo passo de acordo com o escalonador\nconst proximoPasso = () => {\n  //condição para finalizar a execução\n  if (aleatoriosUtilizados >= config.nrAleatorios) {\n    return;\n  }\n\n  let evento = listaDeEventos.reduce(function(res, obj) {\n    return obj.tempo < res.tempo ? obj : res;\n  });\n\n  removeEventoDoEscalonador(evento);\n\n  console.log(`(${evento.id}) - ${evento.tipo} / Tempo: ${evento.tempo}`);\n  if (evento.tipo === \"CHEGADA\") {\n    chegada(evento.tempo, tempoDoUltimoEvento);\n  } else if (evento.tipo === \"SAIDA\") {\n    saida(evento.tempo, tempoDoUltimoEvento);\n  }\n};\n\nexport const agendaSaida = tempo => {\n  console.log(\"agendou uma saída\");\n  listaDeEventos.push({ id, tipo: \"SAIDA\", tempo });\n  id = id + 1;\n};\n\nexport const agendaChegada = (\n  tempo,\n  iniciaExecucao = false,\n  configuracaoInicial\n) => {\n  console.log(\"agendou uma chegada\");\n  listaDeEventos.push({ id, tipo: \"CHEGADA\", tempo });\n  id = id + 1;\n\n  if (iniciaExecucao) {\n    config = configuracaoInicial;\n    proximoPasso();\n  }\n};\n\nexport const chegada = (tempoAtual, tempoAnterior) => {\n  tempoGlobal = tempoAtual - tempoAnterior;\n  //armazena tempo do evento corrente para ser usado no próximo como anterior\n  tempoAnterior = tempoAtual;\n\n  if (FILA < config.capacidadeDaFila) {\n    FILA = FILA + 1;\n    if (FILA <= config.servidores) {\n      agendaSaida(tempoGlobal + rnd(config.saidaMin, config.saidaMax));\n    }\n  } else {\n    PERDAS = PERDAS + 1;\n  }\n  agendaChegada(tempoGlobal + rnd(config.chegadaMin, config.chegadaMax));\n  proximoPasso();\n};\n\nconst saida = (tempoAtual, tempoAnterior) => {\n  tempoGlobal = tempoAtual - tempoAnterior;\n  //armazena tempo do evento corrente para ser usado no próximo como anterior\n  tempoAnterior = tempoAtual;\n\n  FILA = FILA - 1;\n  if (FILA >= config.servidores) {\n    agendaSaida(tempoGlobal + rnd(config.saidaMin, config.saidaMax));\n  }\n  proximoPasso();\n};\n","import React, { useEffect, useState } from \"react\";\nimport Terminal from \"terminal-in-react\";\nimport { agendaChegada } from \"./helper\";\nimport \"./App.css\";\n\nfunction App() {\n  useEffect(() => {\n    console.log(\"Informe os parâmetros de entrada.\");\n    console.log(\"Clique em iniciar para começar a simulação.\");\n    console.log(\"Obs: limite de 1000 número aleatórios\");\n  }, []);\n\n  const [chegadaMin, setChegadaMin] = useState(2);\n  const [chegadaMax, setChegadaMax] = useState(4);\n\n  const [saidaMin, setSaidaMin] = useState(3);\n  const [saidaMax, setSaidaMax] = useState(5);\n\n  const [servidores, setServidores] = useState(1);\n\n  const [capacidadeDaFila, setCapacidadeDaFila] = useState(5);\n\n  const [chegadaInicial, setChegadaInicial] = useState(3);\n\n  const [nrAleatorios, setNrAleatorios] = useState(1000);\n\n  let terminalRef = null;\n\n  const iniciaSimulacao = () => {\n    terminalRef.runCommandOnActive(\"clear\");\n    const configuracaoInicial = {\n      chegadaMin,\n      chegadaMax,\n      saidaMin,\n      saidaMax,\n      servidores,\n      capacidadeDaFila,\n      nrAleatorios\n    };\n    agendaChegada(chegadaInicial, true, configuracaoInicial);\n  };\n\n  const resetaSimulacao = () => {\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"Parameters\">\n        <p>\n          <span>Intervalo de Chegada: </span>\n          <input\n            type=\"number\"\n            className=\"NumberInput\"\n            min=\"0\"\n            max=\"30\"\n            value={chegadaMin}\n            onChange={e => setChegadaMin(e.target.value)}\n          />\n          a\n          <input\n            type=\"number\"\n            className=\"NumberInput\"\n            min=\"0\"\n            max=\"30\"\n            value={chegadaMax}\n            onChange={e => setChegadaMax(e.target.value)}\n          />\n        </p>\n        <p>\n          <span>Intervalo de Saída: </span>\n          <input\n            type=\"number\"\n            className=\"NumberInput\"\n            min=\"0\"\n            max=\"30\"\n            value={saidaMin}\n            onChange={e => setSaidaMin(e.target.value)}\n          />\n          a\n          <input\n            type=\"number\"\n            className=\"NumberInput\"\n            min=\"0\"\n            max=\"30\"\n            value={saidaMax}\n            onChange={e => setSaidaMax(e.target.value)}\n          />\n        </p>\n        <p>\n          <span>Número de servidores: </span>\n          <input\n            type=\"number\"\n            className=\"NumberInput\"\n            min=\"0\"\n            max=\"30\"\n            value={servidores}\n            onChange={e => setServidores(e.target.value)}\n          />\n        </p>\n        <p>\n          <span>Capacidade da fila: </span>\n          <input\n            type=\"number\"\n            className=\"NumberInput\"\n            min=\"0\"\n            max=\"30\"\n            value={capacidadeDaFila}\n            onChange={e => setCapacidadeDaFila(e.target.value)}\n          />\n        </p>\n\n        <p>\n          <span>Chegada Inicial: </span>\n          <input\n            type=\"number\"\n            className=\"NumberInput\"\n            min=\"0\"\n            max=\"30\"\n            value={chegadaInicial}\n            onChange={e => setChegadaInicial(e.target.value)}\n          />\n        </p>\n\n        <p>\n          <span>Aleatórios utilizados: </span>\n          <input\n            type=\"number\"\n            className=\"NumberInput\"\n            min=\"0\"\n            max=\"1000\"\n            value={nrAleatorios}\n            onChange={e => setNrAleatorios(e.target.value)}\n            style={{ width: \"80px\" }}\n          />\n        </p>\n        <p>\n          <button\n            className=\"button\"\n            style={{ backgroundColor: \"#7ee892\" }}\n            onClick={() => iniciaSimulacao()}\n          >\n            Simular\n          </button>\n          <button\n            className=\"button\"\n            style={{ backgroundColor: \"#e87e7e\" }}\n            onClick={() => resetaSimulacao()}\n          >\n            Reset\n          </button>\n        </p>\n      </div>\n\n      <Terminal\n        watchConsoleLogging\n        startState=\"maximised\"\n        hideTopBar\n        color=\"white\"\n        prompt=\"white\"\n        allowTabs={false}\n        ref={terminal => {\n          terminalRef = terminal;\n        }}\n        commands={{\n          \"open-google\": () => window.open(\"https://www.google.com/\", \"_blank\")\n        }}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}